{"version":3,"sources":["Components/AddCategory.js","helpers/GetGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","alt","src","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAgBhD,OACE,sBAAMC,SAVa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAKhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAfhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCLbG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACdC,EADc,iDACkCC,UAAUH,GAD5C,+DAEDI,MAAMF,GAFL,cAEdG,EAFc,gBAGGA,EAAKC,OAHR,uBAGZC,EAHY,EAGZA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAItCa,QAAQC,IAAIR,GAbQ,kBAcbA,GAda,4CAAH,sDCARS,EAAc,SAAC,GAAmB,EAAlBN,GAAmB,IAAhBT,EAAe,EAAfA,IAAIU,EAAW,EAAXA,MAClC,OACE,sBAAKM,UAAU,OAAf,UACE,qBAAKC,IAAKP,EAAOQ,IAAKlB,IACtB,4BAAIU,QCmBKS,EArBC,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECDN,SAAEA,GAAe,IAAD,EAEhBd,mBAAS,CACjCqB,KAAM,GACNe,SAAS,IAJ+B,mBAEnCC,EAFmC,KAE5BC,EAF4B,KAkB1C,OAVAC,qBAAU,WACR1B,EAAQC,GACL0B,MAAK,SAAAC,GACJH,EAAS,CACPjB,KAAMoB,EACNL,SAAS,SAGd,CAAEtB,IAEEuB,EDfwBK,CAAa5B,GAArCsB,EAFyB,EAEzBA,QAAcT,EAFW,EAEhBN,KAEhB,OACE,qCACE,mCAAMP,EAAN,OACCsB,GAAW,2CACZ,qBAAKJ,UAAU,YAAf,SACKL,EAAOJ,KAAI,SAACC,GAAD,OACR,cAAC,EAAD,eAEOA,GADEA,EAAIC,aEQZkB,G,MAhBM,WAAO,IAAD,EACW3C,mBAAS,IADpB,mBAClB4C,EADkB,KACN7C,EADM,KAGzB,OACE,eAAC,WAAD,WACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEC6C,EAAWrB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,WCZtB+B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.bd7f2170.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((cats) => [inputValue, ...cats]);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type='text' value={inputValue} onChange={handleInputChange} />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","\r\n\r\n export const getGifs = async( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=0bhlLw4tK3lG500BxsjSajBEuOvf1ywm`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map((img) => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url,\r\n      };\r\n    });\r\n\r\n    console.log(gifs);\r\n    return gifs;\r\n  };","import React from \"react\";\r\n\r\nexport const GifGridItem = ({id,url,title}) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <img alt={title} src={url} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nconst GifGrid = ({ category }) => {\r\n  \r\n  const {loading, data:images} = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3> {category} </h3>\r\n      {loading && <p>Loading...</p>}\r\n      <div className=\"card-grid\">\r\n          {images.map((img) => \r\n            ( <GifGridItem \r\n                key = {img.id}  \r\n                { ...img }\r\n              />)\r\n          )}\r\n        \r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifGrid;\r\n","import { useState,useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/GetGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n  const [state, setstate] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  \r\n  useEffect(() => {\r\n    getGifs(category)\r\n      .then(imgs =>{\r\n        setstate({\r\n          data: imgs,\r\n          loading: false\r\n        });\r\n      })\r\n  }, [ category ]);\r\n\r\n  return state;\r\n}\r\n","import React, { Fragment, useState } from \"react\";\r\n\r\nimport { AddCategory } from \"./Components/AddCategory\";\r\nimport GifGrid from \"./Components/GifGrid\";\r\n\r\nimport './index.css';\r\n\r\nconst GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      {categories.map((category) => (\r\n        <GifGrid key={category} category={category} />\r\n      ))}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n//import \"./index.css\";\nimport GifExpertApp from \"./GifExpertApp\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}